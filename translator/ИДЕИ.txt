Список идей для проработки:

Что делать по входу в функцию.

Нужно разрезолвить символы. Понять откуда они приходят в функцию, их
область жизни и разреловленное имя

разрезолвенное имя - сопоставление имени python имени в C с учетом
вложенности. как правило это актуально для аттрибутов.

т.е. если бы выбираем аттрибут

a.b.c = 100

что происходит

будет объявлена переменная

PyObject *a$b$c = NULL;

и дальше будут попытки получить каждый аттрибут с откатом по эксепшену

Как описывать переменные ?

Заводим словарик с ключом по (ast.AST, symtable.Symbol)

В качетсве значения будет:

1) Резолв имени
2) Переменная декларирована ? Если нет, то сначала придется сделать
PyObject *<resolved_name> = <Value>

3) Счетчик ссылок. Будем считать его. при передаче в другую функцию увеличиваем
если переменная выходит из блока (например, при откате по ошибке при выборке поля)
уменьшаем. Так же уменьшаем если идет реассигн

4) Определить, используется ли переменная в внутреннем блоке, если да, то пометить ее как
static, чтобы она не удалилась стеком

======================
О поиске символа в каком-либо пространстве имен.

Если символ global, то порядок поиска (в рантайме) следующий:

1) относительно модуля (его инстанс сохраняется расширением при инициализации)
2) Если в нем не нашли, то ищем в PyEval_GetGlobals()
3) если и там нет, то в PyDict_GetItem(PyEval_GetGlobals(), "__builtins__")
4) если и тут нет, то PeErr_Occurred()